{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Day 06 - SQL Programming -  Subqueries using Select Statements","provenance":[{"file_id":"1uZH9HDD66jriiIg1k4nmloOXK2H5mQcs","timestamp":1583907311472}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"v7SpgjvSlIoR","colab_type":"text"},"source":["<font color=\"green\">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>"]},{"cell_type":"markdown","metadata":{"id":"LtFx0bBdlL-n","colab_type":"text"},"source":["# SQL Programming - Subqueries using Select Statements"]},{"cell_type":"markdown","metadata":{"id":"mlCS9-zslSwf","colab_type":"text"},"source":["## 1.0 Connecting to our Database"]},{"cell_type":"code","metadata":{"id":"cEeocMxvnZwS","colab_type":"code","outputId":"4e272d69-95c4-4cef-8988-2924b2af813c","executionInfo":{"status":"ok","timestamp":1583932993717,"user_tz":-180,"elapsed":1082,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# We will first load the sql extension into our environment\n","%load_ext sql\n","\n","# Then connect to our in memory sqlite database\n","# NB: This database will cease to exist as soon as the database connection is closed. \n","%sql sqlite://"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Connected: @None'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"lLI1zQYqlVlt","colab_type":"text"},"source":["## 1.1 Loading Data from CSV Files"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"tNUsWoeTWn_f"},"source":["Datasets used in this notebook:\n","\n","\n","1.   **World Countries**\n","\n","> ([Dataset Download Link](https://drive.google.com/a/moringaschool.com/file/d/1XlabneVWhvbmpRUi_Wix2FR5uYAAp-ZY/view?usp=sharing))\n","\n","2.   **World Cities** \n","\n","> ([Dataset Download Link](https://drive.google.com/a/moringaschool.com/file/d/1R5952m-8hH91uiwDK8dcL9sT2D_PEcuw/view?usp=sharing))\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"jryiwN6GiqoT","colab_type":"code","colab":{}},"source":["# Importing Pandas\n","import pandas as pd"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gnuy0grfirgn","colab_type":"code","outputId":"a8c0be60-73ce-49ff-cc8c-727392e6ef7f","executionInfo":{"status":"ok","timestamp":1583934714176,"user_tz":-180,"elapsed":903,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":213}},"source":["# Loading our Cities dataset\n","# \n","with open('world_cities.csv', 'r') as f:\n","  cities = pd.read_csv(f, index_col=0, encoding='utf-8')\n","%sql DROP TABLE if EXISTS cities\n","%sql PERSIST cities\n","%sql SELECT * FROM cities limit 5;"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"," * sqlite://\n"," * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>city</th>\n","        <th>country</th>\n","        <th>latitude</th>\n","        <th>longitude</th>\n","        <th>temperature</th>\n","    </tr>\n","    <tr>\n","        <td>Aalborg</td>\n","        <td>Denmark</td>\n","        <td>57.03</td>\n","        <td>9.92</td>\n","        <td>7.52</td>\n","    </tr>\n","    <tr>\n","        <td>Aberdeen</td>\n","        <td>United Kingdom</td>\n","        <td>57.17</td>\n","        <td>-2.08</td>\n","        <td>8.1</td>\n","    </tr>\n","    <tr>\n","        <td>Abisko</td>\n","        <td>Sweden</td>\n","        <td>63.35</td>\n","        <td>18.83</td>\n","        <td>0.2</td>\n","    </tr>\n","    <tr>\n","        <td>Adana</td>\n","        <td>Turkey</td>\n","        <td>36.99</td>\n","        <td>35.32</td>\n","        <td>18.67</td>\n","    </tr>\n","    <tr>\n","        <td>Albacete</td>\n","        <td>Spain</td>\n","        <td>39.0</td>\n","        <td>-1.87</td>\n","        <td>12.62</td>\n","    </tr>\n","</table>"],"text/plain":["[('Aalborg', 'Denmark', 57.03, 9.92, 7.52),\n"," ('Aberdeen', 'United Kingdom', 57.17, -2.08, 8.1),\n"," ('Abisko', 'Sweden', 63.35, 18.83, 0.2),\n"," ('Adana', 'Turkey', 36.99, 35.32, 18.67),\n"," ('Albacete', 'Spain', 39.0, -1.87, 12.62)]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"Nl8AVi1OyUmm","colab_type":"code","outputId":"32b15660-f1ae-4eac-ee6f-70dae399d422","executionInfo":{"status":"ok","timestamp":1583934744869,"user_tz":-180,"elapsed":964,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":213}},"source":["# Loading our Countries dataset \n","# \n","with open('world_countries.csv', 'r') as f:\n","  countries = pd.read_csv(f, index_col=0, encoding='utf-8')\n","%sql DROP TABLE if EXISTS countries\n","%sql PERSIST countries\n","%sql SELECT * FROM countries limit 5;"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"," * sqlite://\n"," * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>country</th>\n","        <th>population</th>\n","        <th>EU</th>\n","        <th>coastline</th>\n","    </tr>\n","    <tr>\n","        <td>Albania</td>\n","        <td>2.9</td>\n","        <td>no</td>\n","        <td>yes</td>\n","    </tr>\n","    <tr>\n","        <td>Andorra</td>\n","        <td>0.07</td>\n","        <td>no</td>\n","        <td>no</td>\n","    </tr>\n","    <tr>\n","        <td>Austria</td>\n","        <td>8.57</td>\n","        <td>yes</td>\n","        <td>no</td>\n","    </tr>\n","    <tr>\n","        <td>Belarus</td>\n","        <td>9.48</td>\n","        <td>no</td>\n","        <td>no</td>\n","    </tr>\n","    <tr>\n","        <td>Belgium</td>\n","        <td>11.37</td>\n","        <td>yes</td>\n","        <td>yes</td>\n","    </tr>\n","</table>"],"text/plain":["[('Albania', 2.9, 'no', 'yes'),\n"," ('Andorra', 0.07, 'no', 'no'),\n"," ('Austria', 8.57, 'yes', 'no'),\n"," ('Belarus', 9.48, 'no', 'no'),\n"," ('Belgium', 11.37, 'yes', 'yes')]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"LEAwY5fwleiu","colab_type":"text"},"source":["## 1.2 Subqueries using the SELECT statement"]},{"cell_type":"markdown","metadata":{"id":"xgcGBkvuA3V0","colab_type":"text"},"source":["A subquery is a query within another query. The outer query is called as main query and inner query is called as subquery. The subquery must be enclosed with parenthesis and generally executes first, and its output is used to complete the query condition for the main or outer query. We will go through examples of how subqueries can be used to answers different types of questions then later, we will use our learnings to work on the challenges."]},{"cell_type":"code","metadata":{"id":"--LbGFNOnbTx","colab_type":"code","outputId":"62d0ff10-c15d-4575-866a-a95a9341de40","executionInfo":{"status":"ok","timestamp":1583935357085,"user_tz":-180,"elapsed":923,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":160}},"source":["# Example 1\n","# Subqueries can occur in the select list of the containing query\n","# as shown below;\n","# Let's find all countries in the Countries table with no city in the Cities table\n","# \n","%%sql\n","SELECT country\n","FROM Countries\n","WHERE NOT EXISTS (SELECT * FROM Cities\n","                  WHERE Cities.country = Countries.country) \n"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>country</th>\n","    </tr>\n","    <tr>\n","        <td>Cyprus</td>\n","    </tr>\n","    <tr>\n","        <td>Iceland</td>\n","    </tr>\n","    <tr>\n","        <td>Kosovo</td>\n","    </tr>\n","    <tr>\n","        <td>Liechtenstein</td>\n","    </tr>\n","    <tr>\n","        <td>Luxembourg</td>\n","    </tr>\n","</table>"],"text/plain":["[('Cyprus',), ('Iceland',), ('Kosovo',), ('Liechtenstein',), ('Luxembourg',)]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"8XqiW-Q8ndKT","colab_type":"code","outputId":"9b345fd1-7cb6-4776-9627-c812ea30116a","executionInfo":{"status":"ok","timestamp":1583935484777,"user_tz":-180,"elapsed":886,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["# Example 2\n","# Find the European countries with cities experiencing temperature > 20?\n","# \n","%%sql\n","SELECT country\n","FROM Countries\n","WHERE EU = 'yes'\n","AND EXISTS (SELECT * FROM Cities\n","            WHERE Cities.country = Countries.country\n","            AND temperature > 15)"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>country</th>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Portugal</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","</table>"],"text/plain":["[('Greece',), ('Italy',), ('Portugal',), ('Spain',)]"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"ocuJ_kB4nd3z","colab_type":"code","outputId":"f91cd187-3cc8-4646-9a09-0338ec064b06","executionInfo":{"status":"ok","timestamp":1583935513373,"user_tz":-180,"elapsed":919,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["# Example 3: Method 1\n","# Find the westernmost city, returning the city and longitude\n","# \n","%%sql\n","SELECT city, longitude\n","FROM Cities C1\n","WHERE NOT EXISTS (SELECT * FROM Cities C2\n","                  WHERE C2.longitude < C1.longitude)"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>city</th>\n","        <th>longitude</th>\n","    </tr>\n","    <tr>\n","        <td>Lisbon</td>\n","        <td>-9.14</td>\n","    </tr>\n","</table>"],"text/plain":["[('Lisbon', -9.14)]"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"MQCaPcMQ5pDl","colab_type":"code","colab":{}},"source":["# Example 3: Method 2\n","# Find the westernmost city, returning the city and longitude\n","# \n","%%sql\n","SELECT city, longitude\n","FROM Cities\n","WHERE longitude = (SELECT min(longitude) FROM Cities)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KL5VFl2x7kLZ","colab_type":"code","outputId":"70528ef6-49dd-40e7-a839-74685fc07a64","executionInfo":{"status":"ok","timestamp":1583935580864,"user_tz":-180,"elapsed":901,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["# Example 4:\n","# How many cities are in the EU?\n","# \n","%%sql\n","SELECT count()\n","FROM Cities\n","WHERE country IN (SELECT country FROM Countries WHERE EU = 'yes')"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>count()</th>\n","    </tr>\n","    <tr>\n","        <td>150</td>\n","    </tr>\n","</table>"],"text/plain":["[(150,)]"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"d1czA9cCnfki","colab_type":"text"},"source":["### <font color=\"green\">1.2 Challenges</font>"]},{"cell_type":"code","metadata":{"id":"BpOpH-fznpo2","colab_type":"code","outputId":"6e7e571a-20c2-4f14-f96e-9932a6d0c964","executionInfo":{"status":"ok","timestamp":1583936124705,"user_tz":-180,"elapsed":734,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["# Challenge 1\n","# Find number of countries that have a city with latitude > 1000 (start with country list)\n","# \n","%%sql\n","\n","SELECT count() FROM countries\n","WHERE country IN (SELECT country FROM cities WHERE latitude > 1000) "],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>count()</th>\n","    </tr>\n","    <tr>\n","        <td>0</td>\n","    </tr>\n","</table>"],"text/plain":["[(0,)]"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"jIhUfWXlnrcK","colab_type":"code","outputId":"6f06ab18-39fc-4e01-886c-5e760e90755b","executionInfo":{"status":"ok","timestamp":1583936773256,"user_tz":-180,"elapsed":932,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["# Challenge 2\n","# Find three western most cities returning both the cities and their longitude\n","#\n","%%sql\n","SELECT `city`, `longitude` FROM cities\n","ORDER  BY longitude ASC\n","LIMIT 3;"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>city</th>\n","        <th>longitude</th>\n","    </tr>\n","    <tr>\n","        <td>Lisbon</td>\n","        <td>-9.14</td>\n","    </tr>\n","    <tr>\n","        <td>Galway</td>\n","        <td>-9.05</td>\n","    </tr>\n","    <tr>\n","        <td>Vigo</td>\n","        <td>-8.73</td>\n","    </tr>\n","</table>"],"text/plain":["[('Lisbon', -9.14), ('Galway', -9.05), ('Vigo', -8.73)]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"o0ACgdPAnvrF","colab_type":"code","outputId":"7f996276-b265-4689-d2fa-f9d035533586","executionInfo":{"status":"ok","timestamp":1583937464895,"user_tz":-180,"elapsed":869,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":533}},"source":["# Challenge 3\n","# Find cities with temperature is more than 50% higher than the average; \n","# We will return the city, country, and temperature, ordered by descending temperature\n","# Hint: avg(temperature) * 1.5\n","# \n","%%sql\n","SELECT `country`, `city`, `temperature` FROM cities\n","WHERE temperature > (SELECT AVG(temperature) * 1.5 FROM cities)\n","ORDER BY temperature DESC;"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>country</th>\n","        <th>city</th>\n","        <th>temperature</th>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","        <td>Adana</td>\n","        <td>18.67</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Palermo</td>\n","        <td>17.9</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","        <td>Athens</td>\n","        <td>17.41</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Algeciras</td>\n","        <td>17.38</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Cartagena</td>\n","        <td>17.32</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","        <td>Kalamata</td>\n","        <td>17.3</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Marbella</td>\n","        <td>17.19</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Huelva</td>\n","        <td>17.09</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","        <td>Patras</td>\n","        <td>16.9</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Cosenza</td>\n","        <td>16.6</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Messina</td>\n","        <td>16.54</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Granada</td>\n","        <td>16.33</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Valencia</td>\n","        <td>16.02</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","        <td>Trikala</td>\n","        <td>16.0</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Barcelona</td>\n","        <td>15.78</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Badajoz</td>\n","        <td>15.61</td>\n","    </tr>\n","    <tr>\n","        <td>Portugal</td>\n","        <td>Lisbon</td>\n","        <td>15.52</td>\n","    </tr>\n","    <tr>\n","        <td>Albania</td>\n","        <td>Elbasan</td>\n","        <td>15.18</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Bari</td>\n","        <td>15.15</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Pescara</td>\n","        <td>15.13</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","        <td>Manisa</td>\n","        <td>15.1</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Rome</td>\n","        <td>15.1</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","        <td>Catania</td>\n","        <td>15.04</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","        <td>Denizli</td>\n","        <td>15.02</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","        <td>Murcia</td>\n","        <td>15.0</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","        <td>Marseille</td>\n","        <td>14.98</td>\n","    </tr>\n","</table>"],"text/plain":["[('Turkey', 'Adana', 18.67),\n"," ('Italy', 'Palermo', 17.9),\n"," ('Greece', 'Athens', 17.41),\n"," ('Spain', 'Algeciras', 17.38),\n"," ('Spain', 'Cartagena', 17.32),\n"," ('Greece', 'Kalamata', 17.3),\n"," ('Spain', 'Marbella', 17.19),\n"," ('Spain', 'Huelva', 17.09),\n"," ('Greece', 'Patras', 16.9),\n"," ('Italy', 'Cosenza', 16.6),\n"," ('Italy', 'Messina', 16.54),\n"," ('Spain', 'Granada', 16.33),\n"," ('Spain', 'Valencia', 16.02),\n"," ('Greece', 'Trikala', 16.0),\n"," ('Spain', 'Barcelona', 15.78),\n"," ('Spain', 'Badajoz', 15.61),\n"," ('Portugal', 'Lisbon', 15.52),\n"," ('Albania', 'Elbasan', 15.18),\n"," ('Italy', 'Bari', 15.15),\n"," ('Italy', 'Pescara', 15.13),\n"," ('Turkey', 'Manisa', 15.1),\n"," ('Italy', 'Rome', 15.1),\n"," ('Italy', 'Catania', 15.04),\n"," ('Turkey', 'Denizli', 15.02),\n"," ('Spain', 'Murcia', 15.0),\n"," ('France', 'Marseille', 14.98)]"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"fmUqjv6F6lQ0","colab_type":"code","outputId":"4d779b60-6a3f-4c2a-9f81-2091546165ca","executionInfo":{"status":"ok","timestamp":1583938089756,"user_tz":-180,"elapsed":943,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":355}},"source":["# Challenge 4\n","# How many cities are not in the EU and without a coastline?\n","# Hint: \"not in\"\n","# \n","%%sql\n","\n","SELECT `City` FROM cities\n","WHERE `country` IN (SELECT `country` FROM countries WHERE `coastline` = 'no' and `EU` = 'no');"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>city</th>\n","    </tr>\n","    <tr>\n","        <td>Andorra</td>\n","    </tr>\n","    <tr>\n","        <td>Balti</td>\n","    </tr>\n","    <tr>\n","        <td>Basel</td>\n","    </tr>\n","    <tr>\n","        <td>Belgrade</td>\n","    </tr>\n","    <tr>\n","        <td>Brest</td>\n","    </tr>\n","    <tr>\n","        <td>Chisinau</td>\n","    </tr>\n","    <tr>\n","        <td>Geneva</td>\n","    </tr>\n","    <tr>\n","        <td>Hrodna</td>\n","    </tr>\n","    <tr>\n","        <td>Mazyr</td>\n","    </tr>\n","    <tr>\n","        <td>Minsk</td>\n","    </tr>\n","    <tr>\n","        <td>Nis</td>\n","    </tr>\n","    <tr>\n","        <td>Novi Sad</td>\n","    </tr>\n","    <tr>\n","        <td>Orsha</td>\n","    </tr>\n","    <tr>\n","        <td>Pinsk</td>\n","    </tr>\n","    <tr>\n","        <td>Skopje</td>\n","    </tr>\n","    <tr>\n","        <td>Zurich</td>\n","    </tr>\n","</table>"],"text/plain":["[('Andorra',),\n"," ('Balti',),\n"," ('Basel',),\n"," ('Belgrade',),\n"," ('Brest',),\n"," ('Chisinau',),\n"," ('Geneva',),\n"," ('Hrodna',),\n"," ('Mazyr',),\n"," ('Minsk',),\n"," ('Nis',),\n"," ('Novi Sad',),\n"," ('Orsha',),\n"," ('Pinsk',),\n"," ('Skopje',),\n"," ('Zurich',)]"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"x14dNNSB8X9_","colab_type":"code","outputId":"51ed63cc-5602-4f5b-94c7-b96a931bfc95","executionInfo":{"status":"ok","timestamp":1583938947931,"user_tz":-180,"elapsed":867,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":106}},"source":["# Challenge 5\n","# Find the number of countries with no coastline and a city with longitude < 10\n","# \n","%%sql\n","\n","SELECT (country) FROM countries\n","WHERE coastline = 'no' and country IN (SELECT country FROM cities WHERE longitude < 10)"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>country</th>\n","    </tr>\n","    <tr>\n","        <td>Andorra</td>\n","    </tr>\n","    <tr>\n","        <td>Switzerland</td>\n","    </tr>\n","</table>"],"text/plain":["[('Andorra',), ('Switzerland',)]"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"Z_AeMRdD82F8","colab_type":"code","outputId":"167ab9cd-b3c8-4f9f-cc71-48c5340554c3","executionInfo":{"status":"ok","timestamp":1583940357327,"user_tz":-180,"elapsed":1217,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["# Challenge 6\n","# Find countries in Countries table with no city in Cities table\n","# \n","%%sql\n","\n","SELECT COUNT(country)\n","FROM Countries\n","WHERE country IN (SELECT country FROM cities) and NOT EXISTS (SELECT * FROM Cities )"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>COUNT(country)</th>\n","    </tr>\n","    <tr>\n","        <td>0</td>\n","    </tr>\n","</table>"],"text/plain":["[(0,)]"]},"metadata":{"tags":[]},"execution_count":101}]},{"cell_type":"code","metadata":{"id":"4dW5nRzi9atc","colab_type":"code","outputId":"a0843418-8baf-4e3f-ead9-52027e6b6a82","executionInfo":{"status":"ok","timestamp":1583940568845,"user_tz":-180,"elapsed":914,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":177}},"source":["# Challenge 7\n","# Find all cities in a country whose population is < 2, returning the city and country.\n","# \n","%%sql\n","\n","SELECT country, city FROM cities\n","WHERE country IN (SELECT country FROM countries WHERE population < 2)"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>city</th>\n","        <th>country</th>\n","    </tr>\n","    <tr>\n","        <td>Andorra</td>\n","        <td>Andorra</td>\n","    </tr>\n","    <tr>\n","        <td>Daugavpils</td>\n","        <td>Latvia</td>\n","    </tr>\n","    <tr>\n","        <td>Podgorica</td>\n","        <td>Montenegro</td>\n","    </tr>\n","    <tr>\n","        <td>Riga</td>\n","        <td>Latvia</td>\n","    </tr>\n","    <tr>\n","        <td>Tallinn</td>\n","        <td>Estonia</td>\n","    </tr>\n","    <tr>\n","        <td>Tartu</td>\n","        <td>Estonia</td>\n","    </tr>\n","</table>"],"text/plain":["[('Andorra', 'Andorra'),\n"," ('Daugavpils', 'Latvia'),\n"," ('Podgorica', 'Montenegro'),\n"," ('Riga', 'Latvia'),\n"," ('Tallinn', 'Estonia'),\n"," ('Tartu', 'Estonia')]"]},"metadata":{"tags":[]},"execution_count":102}]},{"cell_type":"code","metadata":{"id":"rZCO_07d9n9G","colab_type":"code","outputId":"572ce6f9-8db5-48d4-b2e6-4eb4016e7dc2","executionInfo":{"status":"ok","timestamp":1583940839805,"user_tz":-180,"elapsed":850,"user":{"displayName":"Michael Teddy","photoUrl":"","userId":"05465468862126933935"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Challenge 8\n","# Find all countries with no city having a temperature > 6\n","# \n","%%sql\n","\n","SELECT country FROM cities\n","WHERE temperature > 6;"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <tr>\n","        <th>country</th>\n","    </tr>\n","    <tr>\n","        <td>Denmark</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Netherlands</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Andorra</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Moldova</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Switzerland</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Serbia</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Portugal</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Slovakia</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Belarus</td>\n","    </tr>\n","    <tr>\n","        <td>Czech Republic</td>\n","    </tr>\n","    <tr>\n","        <td>Belgium</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Hungary</td>\n","    </tr>\n","    <tr>\n","        <td>Bulgaria</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Moldova</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Ireland</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Hungary</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Ireland</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Albania</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Ireland</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Switzerland</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Austria</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Netherlands</td>\n","    </tr>\n","    <tr>\n","        <td>Hungary</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Belarus</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Lithuania</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Lithuania</td>\n","    </tr>\n","    <tr>\n","        <td>Slovakia</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Austria</td>\n","    </tr>\n","    <tr>\n","        <td>Portugal</td>\n","    </tr>\n","    <tr>\n","        <td>Slovenia</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Netherlands</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Sweden</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Belarus</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Serbia</td>\n","    </tr>\n","    <tr>\n","        <td>Serbia</td>\n","    </tr>\n","    <tr>\n","        <td>Denmark</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Czech Republic</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Belarus</td>\n","    </tr>\n","    <tr>\n","        <td>Bulgaria</td>\n","    </tr>\n","    <tr>\n","        <td>Bulgaria</td>\n","    </tr>\n","    <tr>\n","        <td>Montenegro</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Czech Republic</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Croatia</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Germany</td>\n","    </tr>\n","    <tr>\n","        <td>Bulgaria</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Bosnia and Herzegovina</td>\n","    </tr>\n","    <tr>\n","        <td>Romania</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Macedonia</td>\n","    </tr>\n","    <tr>\n","        <td>Croatia</td>\n","    </tr>\n","    <tr>\n","        <td>Bulgaria</td>\n","    </tr>\n","    <tr>\n","        <td>Sweden</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>United Kingdom</td>\n","    </tr>\n","    <tr>\n","        <td>Hungary</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>France</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Italy</td>\n","    </tr>\n","    <tr>\n","        <td>Greece</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Austria</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Poland</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Spain</td>\n","    </tr>\n","    <tr>\n","        <td>Ukraine</td>\n","    </tr>\n","    <tr>\n","        <td>Turkey</td>\n","    </tr>\n","    <tr>\n","        <td>Switzerland</td>\n","    </tr>\n","</table>"],"text/plain":["[('Denmark',),\n"," ('United Kingdom',),\n"," ('Turkey',),\n"," ('Spain',),\n"," ('Spain',),\n"," ('France',),\n"," ('Netherlands',),\n"," ('Italy',),\n"," ('Andorra',),\n"," ('France',),\n"," ('Turkey',),\n"," ('Turkey',),\n"," ('Romania',),\n"," ('Greece',),\n"," ('Romania',),\n"," ('Spain',),\n"," ('Romania',),\n"," ('Moldova',),\n"," ('Spain',),\n"," ('Italy',),\n"," ('Switzerland',),\n"," ('Turkey',),\n"," ('United Kingdom',),\n"," ('Serbia',),\n"," ('Italy',),\n"," ('Germany',),\n"," ('Poland',),\n"," ('Germany',),\n"," ('Ukraine',),\n"," ('Spain',),\n"," ('United Kingdom',),\n"," ('United Kingdom',),\n"," ('Italy',),\n"," ('Germany',),\n"," ('France',),\n"," ('Romania',),\n"," ('United Kingdom',),\n"," ('United Kingdom',),\n"," ('Portugal',),\n"," ('Romania',),\n"," ('Slovakia',),\n"," ('Germany',),\n"," ('France',),\n"," ('Belarus',),\n"," ('Czech Republic',),\n"," ('Belgium',),\n"," ('Romania',),\n"," ('Hungary',),\n"," ('Bulgaria',),\n"," ('Spain',),\n"," ('Turkey',),\n"," ('Poland',),\n"," ('Poland',),\n"," ('France',),\n"," ('United Kingdom',),\n"," ('Spain',),\n"," ('Italy',),\n"," ('Germany',),\n"," ('Ukraine',),\n"," ('Ukraine',),\n"," ('Moldova',),\n"," ('Romania',),\n"," ('Ireland',),\n"," ('Italy',),\n"," ('Romania',),\n"," ('Hungary',),\n"," ('Turkey',),\n"," ('France',),\n"," ('Ireland',),\n"," ('United Kingdom',),\n"," ('United Kingdom',),\n"," ('Turkey',),\n"," ('Albania',),\n"," ('Poland',),\n"," ('Germany',),\n"," ('Turkey',),\n"," ('Turkey',),\n"," ('United Kingdom',),\n"," ('Italy',),\n"," ('Germany',),\n"," ('Germany',),\n"," ('Ireland',),\n"," ('Turkey',),\n"," ('Switzerland',),\n"," ('Italy',),\n"," ('United Kingdom',),\n"," ('Spain',),\n"," ('Austria',),\n"," ('France',),\n"," ('Netherlands',),\n"," ('Hungary',),\n"," ('Germany',),\n"," ('Ukraine',),\n"," ('Belarus',),\n"," ('Spain',),\n"," ('Germany',),\n"," ('United Kingdom',),\n"," ('Turkey',),\n"," ('Greece',),\n"," ('Turkey',),\n"," ('Germany',),\n"," ('Lithuania',),\n"," ('Turkey',),\n"," ('Ukraine',),\n"," ('Poland',),\n"," ('Ukraine',),\n"," ('Lithuania',),\n"," ('Slovakia',),\n"," ('Poland',),\n"," ('Ukraine',),\n"," ('Ukraine',),\n"," ('France',),\n"," ('France',),\n"," ('France',),\n"," ('Austria',),\n"," ('Portugal',),\n"," ('Slovenia',),\n"," ('Ukraine',),\n"," ('Netherlands',),\n"," ('Spain',),\n"," ('Germany',),\n"," ('Ukraine',),\n"," ('Turkey',),\n"," ('Sweden',),\n"," ('Turkey',),\n"," ('Spain',),\n"," ('France',),\n"," ('Belarus',),\n"," ('Italy',),\n"," ('France',),\n"," ('Italy',),\n"," ('France',),\n"," ('France',),\n"," ('Spain',),\n"," ('France',),\n"," ('Serbia',),\n"," ('Serbia',),\n"," ('Denmark',),\n"," ('Turkey',),\n"," ('Czech Republic',),\n"," ('Spain',),\n"," ('Italy',),\n"," ('Greece',),\n"," ('France',),\n"," ('Italy',),\n"," ('Italy',),\n"," ('Belarus',),\n"," ('Bulgaria',),\n"," ('Bulgaria',),\n"," ('Montenegro',),\n"," ('Poland',),\n"," ('Czech Republic',),\n"," ('France',),\n"," ('Croatia',),\n"," ('Ukraine',),\n"," ('Italy',),\n"," ('Germany',),\n"," ('Bulgaria',),\n"," ('Spain',),\n"," ('Turkey',),\n"," ('Spain',),\n"," ('Bosnia and Herzegovina',),\n"," ('Romania',),\n"," ('Turkey',),\n"," ('Turkey',),\n"," ('Macedonia',),\n"," ('Croatia',),\n"," ('Bulgaria',),\n"," ('Sweden',),\n"," ('Ukraine',),\n"," ('United Kingdom',),\n"," ('Hungary',),\n"," ('Turkey',),\n"," ('Turkey',),\n"," ('France',),\n"," ('Turkey',),\n"," ('Italy',),\n"," ('Greece',),\n"," ('Spain',),\n"," ('Austria',),\n"," ('Spain',),\n"," ('Poland',),\n"," ('Poland',),\n"," ('Ukraine',),\n"," ('Spain',),\n"," ('Ukraine',),\n"," ('Turkey',),\n"," ('Switzerland',)]"]},"metadata":{"tags":[]},"execution_count":107}]},{"cell_type":"code","metadata":{"id":"ZzREeeiYOZ9g","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}